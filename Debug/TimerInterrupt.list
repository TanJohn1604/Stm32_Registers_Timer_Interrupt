
TimerInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a4  080003ac  000103ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a4  080003a4  000103ac  2**0
                  CONTENTS
  4 .ARM          00000000  080003a4  080003a4  000103ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a4  080003ac  000103ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ac  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008ce  00000000  00000000  000103d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000227  00000000  00000000  00010ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00010f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd00  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000067a  00000000  00000000  00020ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000535d1  00000000  00000000  00021322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000748f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  00074948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800038c 	.word	0x0800038c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800038c 	.word	0x0800038c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <main>:
void config(void);
void delay_us(uint16_t us );
void delay_ms(uint16_t ms );
void TIM1_UP_IRQHandler();
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	config();
 8000200:	f000 f80a 	bl	8000218 <config>
	GPIOC->ODR |= GPIO_ODR_ODR13;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <main+0x18>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a02      	ldr	r2, [pc, #8]	; (8000214 <main+0x18>)
 800020a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800020e:	60d3      	str	r3, [r2, #12]
    /* Loop forever */
	while(1){
 8000210:	e7fe      	b.n	8000210 <main+0x14>
 8000212:	bf00      	nop
 8000214:	40011000 	.word	0x40011000

08000218 <config>:

	}
}
void config(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <config+0xbc>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a2c      	ldr	r2, [pc, #176]	; (80002d4 <config+0xbc>)
 8000222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000226:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY) );
 8000228:	bf00      	nop
 800022a:	4b2a      	ldr	r3, [pc, #168]	; (80002d4 <config+0xbc>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <config+0x12>
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000236:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <config+0xbc>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a26      	ldr	r2, [pc, #152]	; (80002d4 <config+0xbc>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE));
 8000242:	bf00      	nop
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <config+0xbc>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f9      	beq.n	8000244 <config+0x2c>
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <config+0xbc>)
 8000252:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <config+0xbc>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	6053      	str	r3, [r2, #4]
	RCC->CFGR|= RCC_CFGR_PPRE2_DIV1;
 8000258:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <config+0xbc>)
 800025a:	4a1e      	ldr	r2, [pc, #120]	; (80002d4 <config+0xbc>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	6053      	str	r3, [r2, #4]

	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000260:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <config+0xbc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a1b      	ldr	r2, [pc, #108]	; (80002d4 <config+0xbc>)
 8000266:	f043 0310 	orr.w	r3, r3, #16
 800026a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800026c:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <config+0xbc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <config+0xbc>)
 8000272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000276:	6193      	str	r3, [r2, #24]

	GPIOC->CRH &=~ GPIO_CRH_CNF13;
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <config+0xc0>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <config+0xc0>)
 800027e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000282:	6053      	str	r3, [r2, #4]

	GPIOC->CRH |= GPIO_CRH_MODE13;
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <config+0xc0>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <config+0xc0>)
 800028a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800028e:	6053      	str	r3, [r2, #4]

	TIM1->ARR =0xff;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <config+0xc4>)
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->PSC =7500000-1;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <config+0xc4>)
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <config+0xc8>)
 800029a:	629a      	str	r2, [r3, #40]	; 0x28

	TIM1->DIER |= TIM_DIER_UIE;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <config+0xc4>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <config+0xc4>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	60d3      	str	r3, [r2, #12]



	TIM1->CR1 |=TIM_CR1_CEN;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <config+0xc4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <config+0xc4>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]

	while(! (TIM1->SR & TIM_SR_UIF ));
 80002b4:	bf00      	nop
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <config+0xc4>)
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <config+0x9e>
//	 //bat ngat
	NVIC_SetPriority(TIM1_UP_IRQn ,1);
 80002c2:	2101      	movs	r1, #1
 80002c4:	2019      	movs	r0, #25
 80002c6:	f7ff ff6f 	bl	80001a8 <__NVIC_SetPriority>

	NVIC_EnableIRQ(TIM1_UP_IRQn );
 80002ca:	2019      	movs	r0, #25
 80002cc:	f7ff ff50 	bl	8000170 <__NVIC_EnableIRQ>



}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40011000 	.word	0x40011000
 80002dc:	40012c00 	.word	0x40012c00
 80002e0:	007270df 	.word	0x007270df

080002e4 <TIM1_UP_IRQHandler>:

	for (uint16_t i=0; i<ms ;i++){
		delay_us(1000);
	}
}
void TIM1_UP_IRQHandler(){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
//	}
//	else{
//		GPIOC->ODR |= GPIO_ODR_ODR13;
//	}

}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <LoopForever+0x6>)
  ldr r1, =_edata
 80002fa:	490d      	ldr	r1, [pc, #52]	; (8000330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <LoopForever+0xe>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000300:	e002      	b.n	8000308 <LoopCopyDataInit>

08000302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000306:	3304      	adds	r3, #4

08000308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800030c:	d3f9      	bcc.n	8000302 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000310:	4c0a      	ldr	r4, [pc, #40]	; (800033c <LoopForever+0x16>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000314:	e001      	b.n	800031a <LoopFillZerobss>

08000316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000318:	3204      	adds	r2, #4

0800031a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800031c:	d3fb      	bcc.n	8000316 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031e:	f000 f811 	bl	8000344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000322:	f7ff ff6b 	bl	80001fc <main>

08000326 <LoopForever>:

LoopForever:
    b LoopForever
 8000326:	e7fe      	b.n	8000326 <LoopForever>
  ldr   r0, =_estack
 8000328:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800032c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000330:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000334:	080003ac 	.word	0x080003ac
  ldr r2, =_sbss
 8000338:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800033c:	2000001c 	.word	0x2000001c

08000340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000340:	e7fe      	b.n	8000340 <ADC1_2_IRQHandler>
	...

08000344 <__libc_init_array>:
 8000344:	b570      	push	{r4, r5, r6, lr}
 8000346:	2600      	movs	r6, #0
 8000348:	4d0c      	ldr	r5, [pc, #48]	; (800037c <__libc_init_array+0x38>)
 800034a:	4c0d      	ldr	r4, [pc, #52]	; (8000380 <__libc_init_array+0x3c>)
 800034c:	1b64      	subs	r4, r4, r5
 800034e:	10a4      	asrs	r4, r4, #2
 8000350:	42a6      	cmp	r6, r4
 8000352:	d109      	bne.n	8000368 <__libc_init_array+0x24>
 8000354:	f000 f81a 	bl	800038c <_init>
 8000358:	2600      	movs	r6, #0
 800035a:	4d0a      	ldr	r5, [pc, #40]	; (8000384 <__libc_init_array+0x40>)
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <__libc_init_array+0x44>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	42a6      	cmp	r6, r4
 8000364:	d105      	bne.n	8000372 <__libc_init_array+0x2e>
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f855 3b04 	ldr.w	r3, [r5], #4
 800036c:	4798      	blx	r3
 800036e:	3601      	adds	r6, #1
 8000370:	e7ee      	b.n	8000350 <__libc_init_array+0xc>
 8000372:	f855 3b04 	ldr.w	r3, [r5], #4
 8000376:	4798      	blx	r3
 8000378:	3601      	adds	r6, #1
 800037a:	e7f2      	b.n	8000362 <__libc_init_array+0x1e>
 800037c:	080003a4 	.word	0x080003a4
 8000380:	080003a4 	.word	0x080003a4
 8000384:	080003a4 	.word	0x080003a4
 8000388:	080003a8 	.word	0x080003a8

0800038c <_init>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr

08000398 <_fini>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr
